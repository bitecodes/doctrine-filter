{
  "name": "Doctrine-filter",
  "tagline": "A library to help filter Doctrine entities.",
  "body": "# Doctrine-Filter\r\n\r\n[![Build Status](https://travis-ci.org/bitecodes/doctrine-filter.svg?branch=master)](https://travis-ci.org/bitecodes/doctrine-filter)\r\n[![Coverage Status](https://coveralls.io/repos/github/bitecodes/doctrine-filter/badge.svg?branch=master)](https://coveralls.io/github/bitecodes/doctrine-filter?branch=master)\r\n\r\n## Installation\r\n\r\n```\r\ncomposer require bitecodes/doctrine-filter\r\n```\r\n\r\n## Useage\r\n\r\nIf you would like to use the filter, create a new class and implement the `FilterInterface`.\r\n\r\n``` php\r\n\r\nuse BiteCodes\\DoctrineFilter\\FilterBuilder;\r\nuse BiteCodes\\DoctrineFilter\\FilterInterface;\r\n\r\nclass MyFilter implements FilterInterface\r\n{\r\n    public function buildFilter(FilterBuilder $builder)\r\n    {\r\n        // ...\r\n    }\r\n}\r\n```\r\n\r\nNow you can start defining your filter, by calling `$builder->add($name, $type)`.\r\n\r\n``` php\r\npublic function buildFilter(FilterBuilder $builder)\r\n{\r\n    $builder\r\n        ->add('category', EqualFilterType::class)\r\n        ->add('price_max', LessThanEqualFilterType::class)\r\n        ->orderBy('price', 'DESC);\r\n}\r\n```\r\n\r\nThe name is the key by which the filter will be used. So if you would like to query your entity on the category, you will have to make sure to provide an array that has a key of `category`.\r\n\r\nThere are several different filter types that you can use. Have a look at the list below.\r\n\r\nTo use the filter on your entity, the easiest solution is to create a custom repository and use the `EntityFilterTrait`.\r\n\r\n``` php\r\nuse Doctrine\\ORM\\EntityRepository;\r\nuse BiteCodes\\DoctrineFilter\\Traits\\EntityFilterTrait;\r\n\r\nclass MyRepository extends EntityRepository\r\n{\r\n    use EntityFilterTrait;\r\n}\r\n```\r\n\r\nTo perform the query, you can now call the newly added `filter` method.\r\n\r\n```\r\n$result = $em->getRepository(MyEntity::class)->filter(new MyFilter(), [\r\n\t'category' => 2,\r\n\t'price_max' => 80\r\n]);\r\n```\r\n\r\nThis method will return all entities with a category of 2 and a price that is less than or equal to 80.\r\n\r\n## Ordering results\r\n\r\nYou also have the option to specify the order of the result by using the `orderBy` method. The first argument is the name of the filter, the second argument defines a possible default sorting. You can pass in `'ASC'` or `'DESC'`. Note that after setting the default values, you won't be able to pass a value to the filter. If you need the ability to define the ordering by the search params, pass in `null` as the second argument. \r\n\r\n\r\n## Filter Types\r\n\r\n### BetweenFilterType\r\n\r\nThis filter can be used for ranges and will expose two search keys that you can use.\r\n\r\n``` php\r\nuse BiteCodes\\DoctrineFilter\\Type\\BetweenFilterType;\r\n\r\n$builder\r\n\t->add('price', BetweenFilterType::class, [\r\n\t\t'lower_bound_suffix' => 'from',\r\n\t\t'upper_bound_suffix' => 'to',\r\n\t]);\r\n\t\r\n//...\r\n\r\n$em->getRepository(MyEntity::class)->filter(new MyFilter(), [\r\n\t'price_from' => 40,\r\n\t'price_to' => 80\r\n]); \r\n```\r\n\r\n| Option                | Description                         | Default  |\r\n| --------------------- | ----------------------------------- | -------- |\r\n| lower_bound_suffix    | The suffix of the lower bound       | 'since'  |\r\n| upper_bound_suffix    | The suffix of the upper bound       | 'until'  |\r\n| include_lower_bound   | Should the lower bound be included? | true     |\r\n| include_upper_bound   | Should the upper bound be included? | true     |\r\n\r\n\r\n### ClosureFilterType\r\n\r\n### ComparableFilterType\r\n\r\n### EqualFilterType\r\n\r\nWith this filter the database value has to be the same as the search value.\r\n\r\n### GreaterThanEqualFilterType\r\n\r\nThe database value has to be greater than or equal to the search value.\r\n\r\n### GreaterThanFilterType\r\n\r\nThe database value has to be greater than the search value.\r\n\r\n### InFilterType\r\n\r\nThe database value has to be in the given search values.\r\n\r\n### InstanceOfFilterType\r\n\r\nIf you use inheritance mapping, you can use this filter to return only specific entities. The search values has to be equal to the defined key in the DiscriminatorMap.\r\n\r\n### LessThanEqualFilterType\r\n\r\nThe database value has to be less than or equal to the search value.\r\n\r\n### LessThanFilterType\r\n\r\nThe database value has to be less than the search value.\r\n\r\n### LikeFilterType\r\n\r\nWill perform a like query on the given field.\r\n\r\n### NotEqualFilterType\r\n\r\nThe database value has to be different to the search value.\r\n\r\n### NotInFilterType\r\n\r\nThe database value must not be in the given search values.\r\n\r\n## Todo\r\n\r\n- [ ] Options\r\n  - [ ] Case sensititvity\r\n  - [ ] Default value\r\n- [ ] Distinct\r\n- [ ] InstanceOf for multiple entities\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}